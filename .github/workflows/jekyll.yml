# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

env:
  SITE_DIR: "_site"

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['*']
  pull_request:
    types: [opened, synchronize, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        # https://github.com/ruby/setup-ruby/releases/tag/v1.207.0
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  deploy_preview:
    environment:
      name: github-pages
      url: ${{ steps.preview_url.outputs.url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: 'github-pages'
          path: "$SITE_DIR"

      # Definir preview name
      - name: Define preview name
        id: preview_name
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            echo "name=pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
              echo "name=branch-main" >> $GITHUB_OUTPUT
            else
              echo "name=branch-${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Deploy preview to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: "./$SITE_DIR"
          destination_dir: ${{ steps.preview_name.outputs.name }}

      - name: Get Preview URL
        id: preview_url
        run: |
          echo "url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ steps.preview_name.outputs.name }}/" >> $GITHUB_OUTPUT

      - name: Show deployed preview URL
        run: |
          echo ""
          echo "âœ… Preview deployed:"
          echo "ðŸ‘‰ ${{ steps.preview_url.outputs.url }}"
          echo ""

      - name: Comment preview link on PR
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: preview-link
          message: |
            âœ… Preview deployed

            [![Open PR Preview](https://img.shields.io/badge/Preview-abrir-brightgreen?style=for-the-badge)](${{ steps.preview_url.outputs.url }})

            ðŸ”— PR URL:
            ${{ steps.preview_url.outputs.url }}/


  deploy_production:
    if: github.ref_name == 'main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: 'github-pages'
          path: "$SITE_DIR"

      - name: Create CNAME for production
        run: |
          DOMAIN=$(gh api repos/${GITHUB_REPOSITORY}/pages --jq '.cname')

          rm ./$SITE_DIR/CNAME
          echo "$DOMAIN" > ./$SITE_DIR/CNAME
          echo "www.$DOMAIN" >> ./$SITE_DIR/CNAME

      - name: Deploy to GitHub Pages
        id: deployment
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: "./$SITE_DIR"

      # - name: Deploy to GitHub Pages
      #   id: deployment
      #   uses: actions/deploy-pages@v4

  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages

      - name: Get list of valid previews (branches + PRs)
        id: valid
        run: |
          branches=$(gh api repos/${GITHUB_REPOSITORY}/branches --jq '.[].name' | sed 's/^/branch-/')
          prs=$(gh api repos/${GITHUB_REPOSITORY}/pulls --jq '.[].number' | sed 's/^/pr-/')
          # Add branch-main for security
          echo "list=$branches $prs branch-main" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete orphaned preview dirs
        run: |
          valid="${{ steps.valid.outputs.list }}"
          for dir in */ ; do
            name=$(basename "$dir")
            if [[ ! " $valid " =~ " $name " ]]; then
              echo "Deleting orphan preview: $name"
              # rm -rf "$dir"
            fi
          done

      - name: Push cleaned gh-pages
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Cleanup orphan previews" || echo "No changes"
          git push